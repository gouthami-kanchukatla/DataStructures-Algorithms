
            
                
class Solution:
    def generateAbbreviations(self, word: str) -> List[str]:
        
        result  = []
        
        def backtrack( asf,count,index):
            nonlocal result
            if index == len(word):
                # print(index)
                if count == 0:
                    result.append(asf)
                else:
                    result.append( asf + str(count) )
                return
            
            if count > 0: #included
                backtrack(asf + str(count) + word[index],0,index+1)
            else:
                backtrack(asf+word[index],0,index+1)
            
            backtrack(asf, count+1,index+1)
            
                
        backtrack("",0,0)
        return result
            
                
        

class Solution:
    def longestStrChain(self, words: List[str]) -> int:
        '''
        Throw words into a set, wordSet. Then, for each word, generate
        all possible one-char-removed words, of which there are O(S), where S is length of longest word.
        For each such possible word, we check if it is in the passed-in list of words. If so, then we
        recurse on it.

        Use memoization in longestPathLengths dict to store longest path length from a given word.

        Runtime is O(N*S), where N is num words, S is length of longest word. Each of N words is visited only
        once, and visiting a word involves recursively visiting each of its O(S) neighbors.

        Space is O(N*S) as well, since longestPathLengths dict stores every word, and the space occupied
        by the total set of words is O(N*S). Space from stack is O(N) in the worst case (a chain through every word).
        
        They key for me to avoid an O(N^2) runtime was realizing that it scales better to look at
        every possible one-char-removed word, for each word, rather than looking at every possible pairing
        of the passed-in set of words.
        '''
        wordSet = set(words)
        longestPathLengths = defaultdict()

        def longestChainHelper(word):
            if word in longestPathLengths:
                return longestPathLengths[word]

            # longestPathLengths[word] = 1
            ans = 1
            for c in range(0, len(word)):
                smallWord = word[0:c] + word[c+1:]
                if smallWord in wordSet:
                    ans= max(longestChainHelper(smallWord) + 1, ans)

            longestPathLengths[word] = ans
            return ans
        
        max_result = 0
        for i in range(0, len(words)):
            max_result = max( max_result,longestChainHelper(words[i]))
        return max_result
        
